{
  "google.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "IdpProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 50001,
    "type": "IDPProxys",
    "version": "0.1",
    "description": "Description of IdpProxyStub",
    "objectName": "IdpProxyStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}